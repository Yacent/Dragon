如何运行脚本
	根目录下打开控制台, run.bat 或者 run.bat

程序相关说明：
	recognizeString(int move[][], int accept_state[], String word) -> 对输入字符串进行匹配
		@param move[][] -> record the next state of the input of word
      	@param accept_state[] -> store the accept_state of the DFA
      	@param word -> the input the string waited to recognize
     
      	@param acceptNum -> record the present state in the DFA
      	@param c -> a single letter of the word
      	@param letterNum -> as the parameter of the move, to choose which state to go
      
      	RETURN -> if accepted then true else false
      
      	流程：
      	1. 按照string word的字符串顺序，每次取一个字符 c进行识别
      	2. 计算出 (int)c - 97，0 代表 a, 1 代表 b, 以此类推
      	3. 根据当前状态acceptNum以及输入符号letterNum,调用move二维数组，计算出下一状态，并赋予accpetNum
      	4. 每次循环判断i 是否为字符串最后一个字符
         	-> 是，判断acceptNum是否在accept_state内
               -> 是，return true
         	-> 否， return false

    main -> 迁移数组、结束数组的初始化，调用recognizeString函数进行匹配


PS:
1. recognizeString参数意义相关说明
	1). move[][]是状态迁移函数，move 的每一行代表一个状态，每一列代表一个输入符
		号，第 0 列代表’a’，第 1 列代表’b’，……，依此类推. 例如： move ={{1,0},
		{1,2}, …}， 则表示此 DFA 在状态 0 时， 当输入为’a’时， 迁移到状态 1， 当输入为’b’
		时迁移到状态 0；而 DFA 在状态 1 时，当输入为’a’时，迁移到状态 1，当输入为’b’
		时迁移到状态 2. 注意：默认状态 0 是 DFA 的初始状态.
	2). accept_state[]是接受状态的集合，如 accept_state[] = {2, 3}，则表示状态 2
		和状态 3 是接受状态.
	3). word 是待识别的字符串.

2. DFA.in 的格式示例如下：
	4 2 ----DFA 有 4 个状态，2 个输入符号
	1 0 ----接下来的 4 行 2 列代表状态迁移函数
	1 2
	1 3
	1 0
	3 ----这一行代表接收状态，若有多个用空格隔开
	aaabb ----接下来的每行代表一个待识别的字符串
	abbab
	abbaaabb
	abbb
	# ----‘#’号代表待识别的字符串到此结束
	1 3 ----新的 DFA 开始，格式同上一个 DFA
	0 0 0
	0
	cacba
	#
	0 0 ----两个 0 代表所有输入的结束

3. 当 DFA.in 内容如 2 时，屏幕应输出
	YES
	NO
	YES
	NO
	YES