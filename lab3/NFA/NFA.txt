如何运行脚本
	根目录下打开控制台, run.bat 或者 run.bat

程序相关说明：
	private boolean[] alreadyOn;    // 指出哪个状态已经在newStates中，该数组存放信息和栈中存放信息相同
    private Stack<Integer> oldStates = new Stack<>();   // 当前状态集合
    private Stack<Integer> newStates = new Stack<>();   // 下一个状态集合

	recognizeString(int move[][][], int accept_state[], String word) -> 对输入字符串进行匹配
		@param move[][][] -> (state, letter, to_state)
	    @param accept_state[] -> store the accept_state of the NFA
	    @param word -> the input the string waited to recognize
	     
	    RETURN -> if accepted then true else false

	addState(int i, move[][][]) -> 计算该状态只经过ε所能到达的状态，并更新newStates栈
	     
	    流程：
	    1. 首先计算出开始状态0，只经过ε，所能到达的状态S，即初始状态，调用函数addState
	    2. 根据所得到的初始集合S，遍历字符串word的每个字符c
	    3. 计算 S = ε-closure(move(S,c))，即计算出S当中能到达下一个字符c的状态，并重新计算这些状态addState，即只经过ε能到达的状态
	    4. 上述第3步过程中，即调用了S = ε-closure(move(S,c))的实现函数，伪代码于 NFA.java当中
	    5. 遍历完字符串word后，判断最终得到的oldStates状态当中，是否纯在 接受状态

	main -> 迁移数组、结束数组的初始化，调用recognizeString函数进行匹配



PS：
1. 对于前一版本，已经实现了对 空串 的处理

2. 本代码伪代码来自于 龙书第二版 NFA的模拟

3. NFA状态转移图(|3|表示3为接受态)
			 _ a _
			 ↓    |
			 \   /
	start----> 0 -- a --> 1 -- b --> 2 -- b --> |3|
			 /	 \
			 ↑_ b_|	

4. recognizeString参数意义相关说明
	1). move[][][]是状态迁移函数，move 的第一维代表状态；第二维代表输入符号，第
		0 列代表є，第 1 列代表’a’，第 2 列代表’b’，……，依此类推；第三维代表迁移到的
		状态的集合. 例如：move[0][1] ={0,1}，则表示此 NFA 在状态 0 时，当输入为’a’时，
		迁移到状态 0 或 1. 注意：默认状态 0 是 NFA 的初始状态.
	2). accept_state[]是接受状态的集合，如 accept_state[] = {2, 3}，则表示状态 2
		和状态 3 是接受状态.
	3). word 是待识别的字符串.

5. NFA.in 的格式示例如下：
	4 3 ----NFA 有 4 个状态，包括є共有 3 个输入符号
	{} {0,1} {0} ----接下来的 4 行 3 列代表状态迁移函数
	{} {} {2}
	{} {} {3}
	{} {} {}
	3 ----这一行代表接收状态，若有多个用空格隔开
	aaabb ----接下来的每行代表一个待识别的字符串
	abbab
	abbaaabb
	abbb
	# ----‘#’号代表待识别的字符串到此结束
	0 0 ----两个 0 代表所有输入的结束

6. 当 NFA.in 的内容如 4 时，屏幕应输出:
	YES
	NO
	YES
	NO