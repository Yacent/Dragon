如何运行脚本
	根目录下打开控制台, NFA.bat 或者 NFA.bat

程序相关说明：
	recognizeString(int move[][][], int accept_state[], String word) -> 对输入字符串进行匹配
		@param move[][][] -> (state, letter, to_state)
	    @param accept_state[] -> store the accept_state of the NFA
	    @param word -> the input the string waited to recognize
	     
	    @param result -> using for store the state that recursive in the func called recursive and the deep equal to word.length
	    @param letterNum -> as the parameter of the move, to choose which state to go
	     
	    @func recursive() ->to recursive the state that the machine choose to run
	     
	    RETURN -> if accepted then true else false
	     
	    流程：
	    1. 构造一个递归函数recursive
	    2. 取得输入字符串的首位 word.charAt(0)，并计算出其相对应的值 (int)word.charAt(0) - 96，以表示输入为a b c ……
	    3. 对递归函数传入NFA的初始状态 move[0][*][*]
	    4. 传入递归函数初始状态deep为0，即状态0，deep为当前"指针"所指向字符串的字符位置
	    5. 根据 currentNum = (((int)word.charAt(deep) - 96)) % 27 可以获取当前深度(即指针所在字符串位置)的输入字符
	    6. 根据5所得的currentNum而调用move函数，去判断输入该字符，得出可能迁移到的状态 nextStates
	    7. 根据6所得的nextStates，分别遍历数组中可能到达的状态，分别使用递归，继续向下搜寻，直至遍历完整个字符串
	    8. 将7递归完后的结尾状态，加入到result当中，作为一条可能路径的结尾
	    9. 根据8所得的result容器，遍历其中，寻找是否有与accept_state匹配的状态
	        -> 有：return true
	        -> 无：return false

	recursive(Vector<Integer> result, int nextState,
		int[] nextStates, int deep, String word, int move[][][])　-> 用以按照某条路径递归至字符串末尾
		@param result -> 存放每条路径末尾状态
		@param nextState -> 当前输入字符选择前往的下一个状态
		@param nextStates -> 当前输入字符可以前往的状态集
		@param deep -> 当前输入的位置
		@param word -> 输入的字符串
		@param move -> 状态转换表

	main -> 迁移数组、结束数组的初始化，调用recognizeString函数进行匹配



PS：
1. 对于不可能到达末尾状态的，没有进行剪枝，任其递归，效率较慢

2. 没有对输入 空串的 处理(详细算法参考书本 模拟NFA)

3. NFA状态转移图(|3|表示3为接受态)
			 _ a _
			 ↓    |
			 \   /
	start----> 0 -- a --> 1 -- b --> 2 -- b --> |3|
			 /	 \
			 ↑_ b_|	

4. recognizeString参数意义相关说明
	1). move[][][]是状态迁移函数，move 的第一维代表状态；第二维代表输入符号，第
		0 列代表є，第 1 列代表’a’，第 2 列代表’b’，……，依此类推；第三维代表迁移到的
		状态的集合. 例如：move[0][1] ={0,1}，则表示此 NFA 在状态 0 时，当输入为’a’时，
		迁移到状态 0 或 1. 注意：默认状态 0 是 NFA 的初始状态.
	2). accept_state[]是接受状态的集合，如 accept_state[] = {2, 3}，则表示状态 2
		和状态 3 是接受状态.
	3). word 是待识别的字符串.

5. NFA.in 的格式示例如下：
	4 3 ----NFA 有 4 个状态，包括є共有 3 个输入符号
	{} {0,1} {0} ----接下来的 4 行 3 列代表状态迁移函数
	{} {} {2}
	{} {} {3}
	{} {} {}
	3 ----这一行代表接收状态，若有多个用空格隔开
	aaabb ----接下来的每行代表一个待识别的字符串
	abbab
	abbaaabb
	abbb
	# ----‘#’号代表待识别的字符串到此结束
	0 0 ----两个 0 代表所有输入的结束

6. 当 NFA.in 的内容如 4 时，屏幕应输出:
	YES
	NO
	YES
	NO